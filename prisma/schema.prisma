generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  cart      Cart?
  orders    Orders[]
  createdAt DateTime  @default(now()) 
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Cart {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  price       Decimal     @db.Decimal(10,2)
  imageUrl    String?
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  stock       Int         @default(0)
  categoryId  String?     
  category    Category?   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  stockMovements StockMovement[]
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String?     @unique // Para URLs amigables
  parentId    String?     // Para identificar la categoría padre
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  level       Int         @default(1) // 1 para categorías principales, 2 para subcategorías
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum MovementType {
  SALE
  RETURN
  ADJUSTMENT
  RESTOCK
}

model StockMovement {
  id          String      @id @default(cuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id])
  quantity    Int         // Negativo para salidas, positivo para entradas
  reason      String
  movementType MovementType
  orderId     String?
  order       Orders?     @relation(fields: [orderId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
  @@index([orderId])
}


model Orders {  
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          String
  paymentId       String?
  total           Decimal     @db.Decimal(10,2)
  installments    Int         @default(1)
  paymentMethod   String?
  items           OrderItem[]
  paymentDetails  PaymentDetails?
  stockMovements  StockMovement[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String    @id @default(cuid())
  order     Orders    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal   @db.Decimal(10,2)

  @@index([orderId])
  @@index([productId])
}

model PaymentDetails {
  id                  String    @id @default(cuid())
  orderId            String    @unique
  order              Orders    @relation(fields: [orderId], references: [id])
  paymentType        String    // ticket, bank_transfer, credit_card, etc.
  expirationDate     DateTime?
  paymentInstructions Json?    // Instrucciones específicas del pago
  additionalData     Json?     // Datos adicionales del pago
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([orderId])
}
